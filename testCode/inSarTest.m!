function denoiseBatchTestUD_Banded;
gpuDevice();
addpath('../LASIP');
addpath('../DNCNN/model');
addpath('../DNCNN/utilities');

run /home/cosc/csprh/linux/code/matconvnet-1.0-beta25/matlab/vl_setupnn


scratchDir = '/home/cosc/csprh/linux/HABCODE/scratch/inSAR';
baseDir = [scratchDir '/Valid3/'];
modelDir = [scratchDir '/Models/'];

psnrInds = 0;

modName = ['modelFin_0_' num2str(thisBand) '/' nameOfModel];
lowEdge = borders(thisBand); highEdge = borders(thisBand+1);
bandIms = allIndices((validInds>=lowEdge)&(validInds<highEdge))
thisInd = 0;
for i = 350 : 350+50
    outPSNR(i) = thisDenoise(ii, baseDir, modName,  modelDir);
end
outPSNRMean = mean(outPSNR);



function PSNR = thisDenoise(ImNum, baseDir, nameOfModel,  modelDir)

load(fullfile(modelDir, nameOfModel));

net = vl_simplenn_tidy(net);
net.layers = net.layers(1:end-1);
net = vl_simplenn_tidy(net);

noisyName = [baseDir 'Noisy/Test_Image_' num2str(ImNum) '.png'];
cleanName = [baseDir 'Clean/Test_Image_' num2str(ImNum) '.png'];

zRGB = im2double(imread(noisyName));
yRGB = im2double(imread(cleanName));
input = single(zRGB);
clean = single(yRGB);

res    = vl_simplenn(net,input,[],[],'conserveMemory',true,'mode','test','CuDNN', 'true');

output = input - res(end).x;

[PSNR, SSIM] = Cal_PSNRSSIM(255*clean,255*output,0,0);


